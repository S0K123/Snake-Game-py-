import pygame
import random
from collections import deque

pygame.init()

# Screen settings
width, height = 400, 400
block_size = 20
cols, rows = width // block_size, height // block_size
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Snake AI")

# Colors
black = (0, 0, 0)
green = (0, 255, 0)
red = (255, 0, 0)

font = pygame.font.SysFont(None, 35)

def draw_snake(snake):
    for segment in snake:
        pygame.draw.rect(screen, green, (segment[0]*block_size, segment[1]*block_size, block_size, block_size))

def draw_food(pos):
    pygame.draw.rect(screen, red, (pos[0]*block_size, pos[1]*block_size, block_size, block_size))

def bfs(start, goal, snake_body):
    queue = deque([start])
    came_from = {start: None}
    while queue:
        current = queue.popleft()
        if current == goal:
            break
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = current[0] + dx, current[1] + dy
            next_cell = (nx, ny)
            if 0 <= nx < cols and 0 <= ny < rows and next_cell not in snake_body and next_cell not in came_from:
                queue.append(next_cell)
                came_from[next_cell] = current
    path = []
    node = goal
    while node and node in came_from:
        path.append(node)
        node = came_from[node]
    return path[::-1]  # reverse path

def game_loop():
    clock = pygame.time.Clock()
    snake = [(5,5)]
    food = (random.randint(0, cols-1), random.randint(0, rows-1))
    score = 0

    while True:
        screen.fill(black)
        draw_snake(snake)
        draw_food(food)

        pygame.display.update()
        clock.tick(10)

        # AI pathfinding
        path = bfs(snake[-1], food, set(snake[:-1]))
        if len(path) < 2:
            break  # Game over if no move available
        next_move = path[1]
        snake.append(next_move)

        if next_move == food:
            score += 1
            while True:
                food = (random.randint(0, cols-1), random.randint(0, rows-1))
                if food not in snake:
                    break
        else:
            snake.pop(0)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return

    text = font.render(f"Game Over. Score: {score}", True, red)
    screen.blit(text, (50, height//2))
    pygame.display.update()
    pygame.time.wait(2000)
    pygame.quit()

game_loop()
