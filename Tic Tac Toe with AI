import pygame
import random

# Initialize Pygame
import pygame

pygame.init()

# Constants
WIDTH = 600
HEIGHT = 600
LINE_COLOR = (0, 0, 0)  # Black
X_COLOR = (255, 0, 0)    # Red
O_COLOR = (0, 0, 255)    # Blue
BG_COLOR = (255, 255, 255) # White
FONT_SIZE = 60

# Set up the display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tic-Tac-Toe")

# Game variables
board = [[' ' for _ in range(3)] for _ in range(3)]
player = 'X'
ai = 'O'
winner = None
game_over = False

def draw_grid():
    for i in range(1, 3):
        pygame.draw.line(screen, LINE_COLOR, (0, i * HEIGHT // 3), (WIDTH, i * HEIGHT // 3), 3)
        pygame.draw.line(screen, LINE_COLOR, (i * WIDTH // 3, 0), (i * WIDTH // 3, HEIGHT), 3)

def draw_marks():
    for row in range(3):
        for col in range(3):
            if board[row][col] != ' ':
                x = col * WIDTH // 3 + WIDTH // 6
                y = row * HEIGHT // 3 + HEIGHT // 6
                font = pygame.font.Font(None, FONT_SIZE)
                text = font.render(board[row][col], True, X_COLOR if board[row][col] == 'X' else O_COLOR)
                text_rect = text.get_rect(center=(x, y))
                screen.blit(text, text_rect)

def check_winner():
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != ' ':
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != ' ':
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]
    if all(board[row][col] != ' ' for row in range(3) for col in range(3)):
        return 'Tie'
    return None

def ai_move():
    best_score = -float('inf')
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = ai
                score = minimax(board, 0, False)
                board[row][col] = ' '  # Undo the move
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
    board[best_move[0]][best_move[1]] = ai

def minimax(board, depth, maximizing):
    winner = check_winner()
    if winner:
        if winner == ai:
            return 1
        elif winner == player:
            return -1
        else:  # Tie
            return 0

    if maximizing:
        best_score = -float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = ai
                    score = minimax(board, depth + 1, False)
                    board[row][col] = ' '
                    best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = player
                    score = minimax(board, depth + 1, True)
                    board[row][col] = ' '
                    best_score = min(best_score, score)
        return best_score

# Game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN and not game_over:
            if player == 'X': # Only allow player input if it's their turn
                x, y = pygame.mouse.get_pos()
                col = x // (WIDTH // 3)
                row = y // (HEIGHT // 3)

                if board[row][col] == ' ':
                    board[row][col] = player
                    winner = check_winner()
                    if winner or all(board[i][j] != ' ' for i in range(3) for j in range(3)):
                        game_over = True
                        break # Exit the inner loop early
                    ai_move()
                    winner = check_winner()
                    if winner or all(board[i][j] != ' ' for i in range(3) for j in range(3)):
                         game_over = True
                         break # Exit the inner loop early


    # Draw everything
    screen.fill(BG_COLOR)
    draw_grid()
    draw_marks()

    if winner:
        font = pygame.font.Font(None, FONT_SIZE)
        text = font.render(f"{winner} wins!" if winner != 'Tie' else "It's a tie!", True, LINE_COLOR)
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        screen.blit(text, text_rect)
        game_over = True # Game ends when there's a winner or a tie.

    pygame.display.flip()

pygame.quit()
